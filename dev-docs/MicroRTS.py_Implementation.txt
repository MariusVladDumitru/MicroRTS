======================================================DOCUMENTATION FOR <PROJECT_ROOT>/scripts/MicroRTS.py=========================================================================

MicroRTS is a game written in Java, a platform independet programming language. Because of this, i had the idea of automatic the build process of the game, independent of the operating system. For this need to use a platform independet programming language. I chose python. If, at any point in time, i want to switch from windows to linux or viceversa, then there will be no problems.

<PROJECT_ROOT>/scripts/MicroRTS.py is a python script that makes it easy to perform basic operations with the game, eliminating the need to work directly with the game files or the .jar file.
The conda environment that MicroRTS.py uses is named MicroRTS.
<PROJECT_ROOT>/scripts/MicroRTS.py will we used by the interface project MicroRTS-Python, whenever needed.

The game will be build(compiled) into a single .jar file named MicroRTS.jar. This will be the final executable that will be used.

MicroRTS.py usage:
	MicroRTS.py <command> <arguments>

 - <arguments> are valid only for the current <command>. Some <command> have <arguments>, others do not.
 - <arguments> between [] are optional. Each valid <arguments> have a default value. If <arguments> have been omitted then the default value is used. 

<command> (summary): 
	setup - Makes all the necesary setup for the game to build/run.

	build [<build_path>] - builds the game into a single .jar file named MicroRTS.jar inside the <build_path> folder.

	clean [<clean_path>] - deletes the contents of the <clean_path> folder.

	start [<game_arguments>] - starts the game with <game_arguments>.

	start-gui [<game_arguments>] - starts the game frontend (game gui) with <game_arguments>.

	stop - Ends the execution of the game or game frontend ( game gui).


Detailed Description:

	 - MicroRTS.py setup:
		* Makes all the necesary setup for the game to build/run. The game requires JAVA JDK + libraries located in the lib folder to run. The contents of the lib folder are already included by default in MicroRTS.jar, however Java JDK needs to be installed by the user.
		* Java JDK, in order to function, need the existence of the environment variable JAVA_HOME that holds the full instalation path of JAVA JDK.
		* Java JDK, need to be added in the PATH environment variable because the game needs javac to create MicroRTS.jar and java to run MicroRTS.jar
		* These steps are handled by <PROJECT_ROOT>/scripts/Setup.bat (for windows) or <PROJECT_ROOT>/scripts/Setup.sh (for linux). So, one of the Setup files needs to be executed in order to prepare the shell.
		* Setup.bat is executed by cmd on Windows.
		* Setup.sh is executed by bash on linux.
		* Add the scripts folder to path. For this, the script need to determine the absolute path of the project folder aka PROJECT_ROOT. Then add <PROJECT_ROOT>\scripts to path. Make this operation in python code because it's more easy to determine <PROJECT_ROOT>.
		* Before MicroRTS.py setup execution, the user need to manually edit the Setup file for his operating system to edit line 11, modify JAVA_HOME with the full path where Java JDK is installed.
		* Running MicroRTS.py setup creates a new instance of bash/cmd that executed Setup.sh/Setup.bat. After execution ends the new instance remains, and all further interaction with the game will be made inside the new instance of bash/cmd.
		* MicroRTS.py setup needs to be executed only once, when you open your terminal(shell), BEFORE starting work with the game. If you close and reopen the terminal(shell), the you need to run this command again.
		* The Setup files creates a RUN_SETUP=true environment variables. This signals that the setup commands has already been executed and is not needed to be executed again(except if the terminal closes and all current enviromnent variables are lost).
		* MicroRTS.py setup, WILL ALWAYS CHECK IF RUN_SETUP == true. If RUN_SETUP does not exist or has a different value, then the Setup script is executed, else the command ends.
					
	- MicroRTS.py build [<build_path>]:
		* Builds (compiles) the project into the final MicroRTS.jar file.
		* Any intermediate files (.class or any other file resulted from the build process) and the MicroRTS.jar file will be created inside the <build_path> folder.
		* <build_path> represents the absolute path to a folder.
		* <build_path> (default value) = <PROJECT_ROOT>/build.
		* If <build_path> is provided AND exists on the drive then <build_path> is used. This implies a check to see if <build_path> exists on the drive or not.
		* If <build_path> is empty, omitted, does not exist on the drive, then the default value <PROJECT_ROOT>/build is used instead.
		* <build_path> is saved as an environment variable because it is needed by the clean command. set BUILD_PATH=<build_path>.
		* This command also sets the enviromnet variable BUILD_DONE = true to signal the build status. This variable will be set:
			# BUILD_DONE = true -> the build process was successful and there is a final MicroRTS.jar file inside the <build_path>.
			# BUILD_DONE = false -> the build process was NOT successult and there is NO final MicroRTS.jar file but there may be intermediate .class files inside the <build_path>.
		* Checks the BUILD_DONE == true environment variable to know if a previous build was correct or not. If BUILD_DONE == true/false then call the clean command(a previous build was successful or attepted) After the clean command finishes move on with the build process. if BUILD_DONE is not set, the move on.
		* For creating the final MicroRTS.jar file, the javac utility + the .jar files from the lib folder are needed.
		* The commands for building the final MicroRTS.jar file are:
			1. javac -cp "lib\*" -d build -Xlint:all -Xmaxwarns 10000 -Xmaxerrs 10000 $(find src -name "*.java"): 	
				# javac <options> <source_files>. Java Compiler. Compiles .java (<source_files>) into bytecode .class files using <options>. If one .java file contains multiple classes, each one will be compiled in a separate .class file. Basically 1 .class file = 1 compiled class.
				# -cp "path1:path2" (Linux) or -cp "path1;path2" -> classpath. Ths is a path(directory) that tells the compiler where to find user defined .class files. If the user wants to tell the compiler where to find .jar files, he has to list them specifically by name: file1.jar,file2.jar, etc. These .class files or .jar files are required to be used by other parts of the code.
 					## -cp "lib/*" -> include all the .jar files inside the lib folder. If the user would have written -cp "lib" this would mean include all .class files inside the lib folder. However the lib folder does not hve any .class files, it has only .jar files. To include the .jar files, the user would have to written evrey .jar file by hand, ex: -cp "lib/file1.jar:lib/file2.jar:lib/file3.jar". For convenience -cp "lib/*" means include all .jar files inside de lib folder by default, and IGNORE any .class file inside the lib folder. SO /* means include any .jar file and ignore any .class file.
						### Example: lib has the structure:
							file1_jar.jar
							file2_jar.jar
							file3_class.class
							file4_class.class
							subfolder/file5_jar.jar
							subfolder/file6_class.class
							
							#### -cp "<path>" -> includes all the .class files inside <path> folder but ignores all .jar files inside <path> folder and ignores all subfolders recursively inside <path> folder.
							#### If you ALSO want to include the .class files from subfolders inside path, alongside the files in <path> folder, you need to add them specifically, -cp "<path>:<path_subfolder1>:<path_subfolder2>" where path_subfolder1 = <path>/subfolder1, path_subfolder2 = <path>/subfolder2.
							#### -cp <path/*>" -> includes all the .jar files inside the <path> folder but ignores all the .class files inside <path> folder AND ignores all subdirectories inside <path> folder.
							#### If you ALSO want to include the .jar files from subfolders inside path, alongside the files in <path> folder, you need to add them specifically, -cp "<path/*>:<path_subfolder1/*>:<path_subfolder2/*>" where path_subfolder1 = <path>/subfolder1, path_subfolder2 = <path>/subfolder2.
							#### If you want to include both .jar and .class files inside <path> folder and inside it's subfolders, then you have to use a mix of the two:
								-cp "lib:lib/*:path_subfolder1:path_subfolder1/*:path_subfolder2:path_subfolder2/*" where path_subfolder1 = <path>/subfolder1, path_subfolder2 = <path>/subfolder2. 
 
				# -d <path> -> write all the .class files inside the <path> folder.
				  	## -d build -> write all the .class files inside the <PROJECT_PATH>/build folder. 
				# $(find src -name "*.java"):
					## $(<command>) - bash shell command substitution. Run the <command> inside the () and use it's output, in place, as an argument for another command.
					### find src -name ".java" -> search recursively inside the src folder AND inside all of it's folders for files that contains the string ".java" in their names. Search for all the .java files inside the src directory. This command outputs the RELATIVE PATH to evrey file name whose names contain ".java" (relative outptut to evrey .java file inside the src folder and all it's subfolders recursively).
					## $(find src -name "*.java") -> provide a list all .java files(with relative paths) inside the src folder and all it's subfolders.
					## Xlint:all -> enable all warnings. All warnings types will be printed.
					## Xmaxwarns 10000 -> print a max number of 10000 warnings to the console.
					## Xmaxerrs 10000 -> print a max number of 10000 errors to the console.
				# javac -cp "lib/*" -d build -Xlint:all $(find src -name "*.java") -> compile all the .java files from the src folder and all it's subfolders recursively, write the resulting .class files inside the build folder, use the contents of the lib folder to find (include) any needed external libraries and link them(they do not become part of the .class file, they are only linked, you need to use -cp "lib/*" again when running the .class file) print any warning and error you find, up to a cap of 10000 warnings and 10000 errors. 
				  
		2. cd build - change into the build directory
		3. find ../lib -name "*.jar" | xargs -n 1 jar xvf # extract the contents of the JAR dependencies:
			# find ../lib -name "*.jar" -> search recursively inside the lib folder ( we are in build that is why ../lib is there) for files whose names contain ".jar" meaning search recursively inside lib folder for all ".jar" files and display theirs names and relative paths.
			# | -> pipe operator. The output of the previous command becomes input for the next command.
			# xargs -n 1 jar xvf:
				## xargs -n 1:
					### xargs -> builds and executes commands from standard input OR from piped data
					### -n 1 -> pass only one argument at a time
				## xargs -n 1 -> execute the received commands, either through standard input or through piping one command at a time
				## jar xvf:
					### jar -> java utility to create, extract, manager .jar files
					### xvf -> flags for the jar commandd:
						x -> extract files from the .jar archive.
						v -> Verbose output aka show details of extracted files.
						f -> next argument is represents the .jar file filename
				## jar xvf -> extract the contents of the .jar file specified by <filename>(<filename> is the argument that comes after the flags), output all the extracted files details to the console.
			# xargs -n 1 jar xvf -> exectue the command jar xvf <filename> one line at a time meaning extract each .jar file, one file at a time. The name and relative path of the files to be extracted are given as input using the pipe | operator. These filenames alogside their relative path are the output of a previous command and piped in to this command.
			# find ../lib -name ".jar" | xargs -n 1 jar xvf -> search recursively inside de lib folder(including it's subfolder) for all the .jar files and list their relative paths and their names.This output of the find command becomes input to the xargs command meaning extract each the contents of the current .jar file, output the results to the console, extract one file at a time. The contents of the .jar file are extracted inside the current folder witch, in our case, is the build folder.

		4. jar cvf MicroRTS.jar $(find build -name '*.class' -type f):
			# jar cvf MicroRTS.jar -> creates the MicroRTS.jar jar file and outptus the details to the console. c - create file, v - verbose (oputput what you do to the terminal), f - specify the .jar filename.
			# $(find build -name '*.class' -type f):
				## $(<command>) - bash shell command substitution. Run the <command> inside the () and use it's output, in place, as an argument for another command.
				## find build -name '*.class' -type f -> search inside the build folder for all the files containing '.class' and display theirs names and relative paths, while ignoring any subdirectories, search only for files.  -type f -> ignore subdirectories, search only for files. 
			# jar cvf MicroRTS.jar $(find . -name '*.class' -type f) -> create the final MicroRTS.jar file using the jar utility from all the .class files inside the build folder.

		To summarise, in order to build the projects and get the final MicroRTS.jar file, the steps are:
			& Compile all the .java files inside the src folder recursively, put the resulting .class files inside the build folder.
			& For the required libraries(witch are in lib folder): extract all .class files from all the available .jar files and put them inside the build folder.
			& In this stage, the build folder will contain .class files from both the project and any needed library. Just compile all the .class files available into one big .jar file named MicroRTS.jar
 			 
	- MicroRTS.py clean [<clean_path>]:
		* Performes the clean operation (after a previous build command). This means deleting all the intermediate .class files resulting from the build process and the final MicroRTS.jar from <clean_path> or <build_path>.
			# Checks if BUILD_DONE == true/false (a previous build command was successful or not) moves along with the clean process.
			# If BUILD_DONE is not set => a previous build was not attempted => clean command will exit.
		* If <clean_path> is omitted:
			# Then <clean_path> = <build_path> and moves along with the clean process.
		* if <clean_path> is provided:
			# checks <clean_path>:
				## if <clean_path> is valid, then performs the clean operation on <clean_path>
				## if <clean_path> is invalid then <clean_path> (default_value) = <project_root>/build and moves on with the operation.
			
	- MicroRTS.py start [<MicroRTS.jar_path][<game_arguments>]:
		* <MicroRTS.jar_path> = full that where microrts.jar is located (microrts.jar name is not included)
		* <game_arguments> = game arguments that will be passed directly to the game.
		* creates a new instance of the game with optional <game_arguments> using the cmd/bash instance already started with the previous setup command.
		* Checks if a previous instance of the game/game-gui is already running. If so, call the stop command then move forward.
		* if RUN_SETUP == true then move forward.
		* if RUN_SETUP == false or not set then call the setup method, and tell the user that it need to run this command again because he did not run setup before.
		* if <MICRORTS.JAR_path> is provided -> checks if <microrts.jar> path is valid and contains the microrts.jar file.
		* If <MicroRTS.jar_path> is provided but invalid then the build folder is used.
		* if <MicroRTS.JAR_path> is omitted:
		 	# if BUILD_DONE == true then microrts.jar exists and is in <build_path>.  run the game with <game_arguments>.
			# if BUILD_DONE == false/inexistend then run the build command with no parameters to make the microrts.jar file. this file is in <build_path>. after, run the game and pass <game_arguments>.
		* the command to start the game is:
			java -cp MicroRTS.jar rts.MicroRTS <game_arguments>:
				# java -> launch Java Virtual Machine (JVM) to execute the code
				# -cp MicroRTS.jar -> specifies the classpath, tells java where to look for .class files and dependencies needed to run the program. JVM loads the classes from MicroRTS.jar
				# rts.MicroRTS -> the MicroRTS class inside the rts package (hint: this contains the main function)
				# <game_arguments> -> all the arguments that will be passed to the game
				# java -cp MicroRTS.jar rts.MicroRTS <game_arguments> -> starts the Java Virtual Machine(JVM) that executes the MicroRTS class inside the rts package. Search for all classes and dependencies inside MicroRTS.jar file. Pass <game_arguments> to the MicroRTS class.	

	- MicroRTS.py start-gui [<MicroRTS.jar_path]:
		* Does the exact same things as the start command with two exceptions:
			a. Instead of starting the game, it starts the game frontend(game gui). The game frontend is a GUI interface that allows different setups of the game to be build before running the game.
			b. Does not accept additional <game_arguments> as the start command does
		* The command to start the game-gui is:
			java -cp MicroRTS.jar gui.frontend.FrontEnd:
				# java -> launch Java Virtual Machine (JVM) to execute the code
				# -cp MicroRTS.jar -> specifies the classpath, tells java where to look for .class files and dependencies needed to run the program. JVM loads the classes from MicroRTS.jar
				# gui.frontend.FrontEnd -> the FrontEnd class inside the gui.frontend package (hint: this contains the main function)
				# <game_arguments> -> all the arguments that will be passed to the game
				#  java -cp MicroRTS.jar gui.frontend.FrontEnd-> starts the Java Virtual Machine(JVM) that executes the FrontEnd class inside the gui.frontend package. Search for all classes and dependencies inside MicroRTS.jar file.
			
	- MicroRTS.py stop:
		* Stop the execution of any current running instance of MicroRTS.
		* Checks if the game is currently running:
			# If the game is running -> stops the game
			# If the game is not running -> don't do anything.
