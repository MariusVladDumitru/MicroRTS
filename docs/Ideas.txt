I need to be able to build MicroRTS in a platform independent way aka the same build process will be on Windows and Linux. 
This is because, if at some point, for whatever reason, i decide to switch from Windows to Linux or viceversa, i only need to do a minimal exportup and not bother much with the build process.
MicroRTS is a game written in Java, a platform independent language, so i'm looking for a platform independent language for it's build process to. I decided on using python because it is platform independent and i use it exclusively on the other parts of my dissertation thesis, so it makes perfect sense to go with it.
I will be adding 2 folders:
     - docs: alongside the Project wiki, this folder contains files that are useful in any way in documenting the Project, like this Ideas.txt file.
     - scripts: various scripts useful to the project. GAME CODE WILL NEVER BE HERE be it java code or any other programming language code related to the inner workings of the game itself.
        * Setup.bat and Setup.sh - prepare the operating system shell(Windows - Setup.bat and Linux - Setup.sh).
            & Make sure Java JDK is installed on the system
            & Setup.bat and Setup.sh exports the JAVA_HOME, JAVA_BIN, JAVA_SERVER - environment variables for your shell, but you need to define them manually.
            & JAVA_HOME = path where Java JDK is installed -> THIS IS REQUIRED by the JAVA JDK to WORK
            & JAVA_BIN = bin folder from where Java JDK is installed aka JAVA_HOME/bin. -> This i defined it myself.
            & JAVA_SERVER = server folder from the bin folder from the Java JDK folder aka JAVA_HOME/bin/server or JAVA_BIN/server. -> This i defined it myself.
            & The environment variables set by Setup.bat and Setup.sh are local to your running shell(terminal) and not global.
            & Run Setup.bat/Setup.sh only once, when you start your terminal.
            & If you close then reopen your terminal, run Setup.bat/Setup.sh again.

        * MicroRTS.py - python script that manages the game:
          MicroRTS.py has the following commands:
            # MicroRTS.py setup -> prepares the shell to work with MicroRTS by executing Setup.bat or Setup.sh and adds the <PROJECT_ROOT>/scripts folder to path. Let's explore the idea of asking the user the path to JAVA JDK or figuring out by himself where JAVA JDK is and set JAVA_HOME automatically.

            # MicroRTS.py build [<build_path>] -> builds the whole game into a single MicroRTS.jar file. All the intermediate files and final MicroRTS.jar file are to be written in <build_path> specified by the user. <build_path> needs to be a valid path. If <build_path> was omitted then the default value is: <build_path> = <PROJECT_ROOT>/build (default value). <build_path> needs to be saved between the last build command and the next clean command, because clean needs to know what path to clean. Save <build_path> between the most recent run of MicroRTS.py build and the next run of MicroRTS.py clean

            # MicroRTS.py clean [<clean_path>] -> deletes all the intermediate files in <clean_path>, including MicroRTS.jar. If <clean_path> is omitten, the is check if <build_path> is available. If <build_path> is available, then the command deletes all the intermediate files, including MicroRTS.jar from <build_path>. If <build_path> is not available for whatever reason, the the contents of the director <PROJECT_ROOT>/build is deleted, including MicroRTS.jar

            # MicroRTS.py start [<arguments>]. -> runs the main game with optional <arguments>. <arguments> are passed directly to the game:
                Ex: MicroRts.py run -f configFile <=> java -cp MicroRTS.jar rts.MicroRTS -f configFile

            # MicroRTS.py start-gui [<arguments>] - runs the game gui with optional <arguments>. <arguments> are passed directly to the game:
                Ex: MicroRts.py run-gui -f configFile <=> java -cp MicroRTS.jar gui.frontend.FrontEnd -f configFile

            # MicroRTS.py stop -> stops the execution of the game. 

        @ Setup will create a new instance of cmd.
          start/start-gui will create new instances of game/game-gui
          stop will end the execution of game/game-gui.
          BUI WHAT HAPPENES IF MULTIPLE INSTANCES OF game/game-gui are available?
          FOR SIMPLICITY: i show not allow for a new instance of game/game-gui to start. IF start/start-gui is called and there is an already running instance of game/game-gui just throw an error that game/game-gui is already running and you cannot start a new one.

            MicroRTS.py will be used by the MicroRTS-Python api to control the game.
                             

Implementation ideas for MicroRTS.py:
	- MicroRTS.py setup:
		* General idea: prepare ( setup) the environment to work with MicroRTS.
		 
		* Use batch, cmd, or powershell to launch setup scripts:
			& Setup.bat - cmd
			& Setup.sh -  bash
			& Setup.ps1 - powershell
				@ These Setup.* scripts prepare the environment with anything thats needed to work with MicroRTS. Mainly add Java JDK to path but can do other stuff too, if needed.
				@ After these scripts do their job, all MicroRTS.py  commands are need to be executed in the new spawned shell.
		   
		 * ONLY Run MicroRTS.py setup just once, when you open your shell ( terminal ). There is a dedicated environment variable RUN_SETUP=true that get's set when one of this scripts is executed.
		 * At each MicroRTS.py setup run, RUN_SETUP is checked if it's true. If RUN_SETUP == true, then don't allow the command to execute. if RUN_SETUP is not set or is any other value, the execute the command.
	 
	- MicroRTS.py build <build_dir>:
		* General idea: builds the whole project into a single MicroRTS.jar file. Intermediate files + MicroRTS.jar file all go inside <build_dir> files.
		* THe original commands for building, from the original author is:
			 javac -cp "lib/*:src" -d bin $(find . -name "*.java") # compile source files
			 cd bin
			 find ../lib -name "*.jar" | xargs -n 1 jar xvf # extract the contents of the JAR dependencies
			 jar cvf microrts.jar $(find . -name '*.class' -type f) # create a single JAR file with sources and dependencies
		 Explanations:
			 javac -cp "lib/*:src" -d bin $(find . -name "*.java") # compile source files
				javac - this is the java compiles. Compiles .java to .class files.
					javac <options> <source_files>
				Options:
					-cp = classpath => specify there to fined user defined .class files
			


