======================================================DOCUMENTATION FOR <PROJECT_ROOT>/scripts/MicroRTS.py=========================================================================

MicroRTS is a game written in Java, a platform independet programming language. Because of this, i had the idea of automatic the build process of the game, independent of the operating system. For this need to use a platform independet programming language. I chose python. If, at any point in time, i want to switch from windows to linux or viceversa, then there will be no problems.

<PROJECT_ROOT>/scripts/MicroRTS.py is a python script that makes it easy to perform basic operations with the game, eliminating the need to work directly with the game files or the .jar file.
The conda environment that MicroRTS.py uses is named MicroRTS.
<PROJECT_ROOT>/scripts/MicroRTS.py will we used by the interface project MicroRTS-Python, whenever needed.

The game will be build(compiled) into a single .jar file named MicroRTS.jar. This will be the final executable that will be used.

MicroRTS.py usage:
	MicroRTS.py <command> <arguments>

 - <arguments> are valid only for the current <command>. Some <command> have <arguments>, others do not.
 - <arguments> between [] are optional. Each valid <arguments> have a default value. If <arguments> have been omitted then the default value is used. 

<command> (summary): 
	setup - Makes all the necesary setup for the game to build/run.

	build [<build_path>] - builds the game into a single .jar file named MicroRTS.jar inside the <build_path> folder.

	clean [<clean_path>] - deletes the contents of the <clean_path> folder.

	start [<game_arguments>] - starts the game with <game_arguments>.

	start-gui [<game_arguments>] - starts the game frontend (game gui) with <game_arguments>.

	stop - Ends the execution of the game or game frontend ( game gui).


Detailed Description:

	 - MicroRTS.py setup:
		* Makes all the necesary setup for the game to build/run. The game requires JAVA JDK + libraries located in the lib folder to run. The contents of the lib folder are already included by default in MicroRTS.jar, however Java JDK needs to be installed by the user.
		* Java JDK, in order to function, need the existence of the environment variable JAVA_HOME that holds the full instalation path of JAVA JDK.
		* Java JDK, need to be added in the PATH environment variable because the game needs javac to create MicroRTS.jar and java to run MicroRTS.jar
		* These steps are handled by <PROJECT_ROOT>/scripts/Setup.bat (for windows) or <PROJECT_ROOT>/scripts/Setup.sh (for linux). So, one of the Setup files needs to be executed in order to prepare the shell.
		* Setup.bat is executed by cmd on Windows.
		* Setup.sh is executed by bash on linux.
		* Before MicroRTS.py setup execution, the user need to manually edit the Setup file for his operating system to edit line 11, modify JAVA_HOME with the full path where Java JDK is installed.
		* Running MicroRTS.py setup creates a new instance of bash/cmd that executed Setup.sh/Setup.bat. After execution ends the new instance remains, and all further interaction with the game will be made inside the new instance of bash/cmd.
		* MicroRTS.py setup needs to be executed only once, when you open your terminal(shell), BEFORE starting work with the game. If you close and reopen the terminal(shell), the you need to run this command again.
		* The Setup files creates a RUN_SETUP=true environment variables. This signals that the setup commands has already been executed and is not needed to be executed again(except if the terminal closes and all current enviromnent variables are lost).
		* MicroRTS.py setup, WILL ALWAYS CHECK IF RUN_SETUP == true. If RUN_SETUP does not exist or has a different value, then the Setup script is executed, else the command ends.
					
	- MicroRTS.py build [<build_path>]:
		* Builds (compiles) the project into the final MicroRTS.jar file.
		* Any intermediate files (.class or any other file resulted from the build process) and the MicroRTS.jar file will be created inside the <build_path> folder.
		* <build_path> represents the absolute path to a folder.
		* <build_path> (default value) = <PROJECT_ROOT>/build.
		* If <build_path> is provided AND exists on the drive then <build_path> is used. This implies a check to see if <build_path> exists on the drive or not.
		* If <build_path> is empty, omitted, does not exist on the drive, then the default value <PROJECT_ROOT>/build is used instead.
		* <build_path> is saved as an environment variable because it is needed by the clean command.
		* For creating the final MicroRTS.jar file, the javac utility + the .jar files from the lib folder are needed.
		* The commands for building the final MicroRTS.jar file are:
			1. javac -cp "lib\*" -d build -Xlint:all -Xmaxwarns 10000 -Xmaxerrs 10000 $(find src -name "*.java"): 	
				# javac <options> <source_files>. Java Compiler. Compiles .java (<source_files>) into bytecode .class files using <options>. If one .java file contains multiple classes, each one will be compiled in a separate .class file. Basically 1 .class file = 1 compiled class.
				# -cp "path1:path2" (Linux) or -cp "path1;path2" -> classpath. Ths is a path(directory) that tells the compiler where to find user defined .class files. If the user wants to tell the compiler where to find .jar files, he has to list them specifically by name: file1.jar,file2.jar, etc. These .class files or .jar files are required to be used by other parts of the code.
 					## -cp "lib/*" -> include all the .jar files inside the lib folder. If the user would have written -cp "lib" this would mean include all .class files inside the lib folder. However the lib folder does not hve any .class files, it has only .jar files. To include the .jar files, the user would have to written evrey .jar file by hand, ex: -cp "lib/file1.jar:lib/file2.jar:lib/file3.jar". For convenience -cp "lib/*" means include all .jar files inside de lib folder by default, and IGNORE any .class file inside the lib folder. SO /* means include any .jar file and ignore any .class file. ---AM RAMAS AICI LA EXPLICATIA DIFERENTEI DINTRE <dir> si <dir/*>
				# -d <path> -> write all the .class files inside the <path> folder.
				  	## -d build -> write all the .class files inside the <PROJECT_PATH>/build folder. 
				# $(find src -name "*.java"):
					## $() - bash shell command substitution. Run the command inside the () and use it's output, in place, as an argument for another comand
					### find src -name ".java" -> search recursively inside the src folder AND inside all of it's folders for files that contains the string ".java" in their names. Search for all the .java files inside the src directory. This command outputs the RELATIVE PATH to evrey file name whose names contain ".java" (relative outptut to evrey .java file inside the src folder and all it's subfolders recursively).
					## $(find src -name "*.java") -> provide a list all .java files(with relative paths) inside the src folder and all it's subfolders.
					## Xlint:all -> enable all warnings. All warnings types will be printed.
					## Xmaxwarns 10000 -> print a max number of 10000 warnings to the console.
					## Xmaxerrs 10000 -> print a max number of 10000 errors to the console.
				# javac -cp "lib/*" -d build -Xlint:all $(find src -name "*.java") -> compile all the .java files from the src folder(including all subfolders recursevly), write the corresponding .class files inside the build folder, use the contents of the lib folder to find any needed external libraries and link them(they do not become part of the .class file, they are only linked, you need to use -cp "lib/*" again when running the .class file) and output all warnings in the process. 
				  
	
	- MicroRTS.py clean [<clean_path>]:
		* Description 1
		* Description 2

	- MicroRTS.py start [<game_arguments>]:
		* Description 1
		* Description 2

	- MicroRTS.py start-gui [<game_arguments]:
		* Description 1
		* Description 2

	- MicroRTS.py stop:
		* Description 1
		* Description 2

		


 
======================= Here comes the old stuff =================================================================================


- MicroRTS.py build <build_dir>:
		* General idea: builds the whole project into a single MicroRTS.jar file. Intermediate files + MicroRTS.jar file all go inside <build_dir> files.
		* THe original commands for building, from the original author is:
			 javac -cp "lib/*:src" -d bin $(find . -name "*.java") # compile source files
			 cd bin
			 find ../lib -name "*.jar" | xargs -n 1 jar xvf # extract the contents of the JAR dependencies
			 jar cvf microrts.jar $(find . -name '*.class' -type f) # create a single JAR file with sources and dependencies
		 Explanations:
			 javac -cp "lib/*:src" -d bin $(find . -name "*.java") # compile source files
				javac - this is the java compiles. Compiles .java to .class files.
					javac <options> <source_files>
				Options:
					-cp = classpath => specify there to fined user defined .class files
			


